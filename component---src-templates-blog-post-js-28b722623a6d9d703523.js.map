{"version":3,"sources":["webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/startOfDay/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/differenceInDays/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/compareAsc/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/endOfDay/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/endOfMonth/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/isLastDayOfMonth/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/differenceInMonths/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/_lib/assign/index.js","webpack://blog-with-gatsby-web/./node_modules/date-fns/esm/formatDistance/index.js","webpack://blog-with-gatsby-web/./src/components/author-list.js","webpack://blog-with-gatsby-web/./src/components/author-list.module.css","webpack://blog-with-gatsby-web/./src/components/blog-post.js","webpack://blog-with-gatsby-web/./src/components/blog-post.module.css","webpack://blog-with-gatsby-web/./src/templates/blog-post.js"],"names":["startOfDay","dirtyDate","requiredArgs","arguments","date","toDate","setHours","MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","getTime","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","compareLocalAsc","dateLeft","dateRight","diff","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","compareAsc","differenceInCalendarMonths","yearDiff","monthDiff","endOfDay","endOfMonth","month","setFullYear","isLastDayOfMonth","differenceInMonths","result","sign","difference","abs","setDate","setMonth","isLastMonthNotFull","differenceInMilliseconds","differenceInSeconds","floor","ceil","cloneObject","dirtyObject","target","TypeError","property","hasOwnProperty","MINUTES_IN_DAY","MINUTES_IN_MONTH","items","title","className","map","author","_key","authorName","name","key","image","asset","src","imageUrlFor","buildImageObj","width","height","fit","url","alt","props","_rawBody","authors","categories","mainImage","publishedAt","auto","blocks","isLastDayNotFull","differenceInDays","Date","dirtyBaseDate","dirtyOptions","options","locale","formatDistance","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","months","seconds","offsetInSeconds","minutes","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","format","category","_id","data","errors","post","description","toPlainText","_rawExcerpt"],"mappings":"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","file":"component---src-templates-blog-post-js-28b722623a6d9d703523.js","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * var result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = compareLocalAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - isLastMonthNotFull);\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import * as styles from \"./author-list.module.css\";\nimport React from \"react\";\nimport { buildImageObj } from \"../lib/helpers\";\nimport { imageUrlFor } from \"../lib/image-url\";\n\nfunction AuthorList({ items, title }) {\n  return (\n    <div className={styles.root}>\n      <h2 className={styles.headline}>{title}</h2>\n      <ul className={styles.list}>\n        {items.map(({ author, _key }) => {\n          const authorName = author && author.name;\n          return (\n            <li key={_key} className={styles.listItem}>\n              <div>\n                <div className={styles.avatar}>\n                  {author && author.image && author.image.asset && (\n                    <img\n                      src={imageUrlFor(buildImageObj(author.image))\n                        .width(100)\n                        .height(100)\n                        .fit(\"crop\")\n                        .url()}\n                      alt=\"\"\n                    />\n                  )}\n                </div>\n              </div>\n              <div>\n                <div>{authorName || <em>Missing name</em>}</div>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default AuthorList;\n","// extracted by mini-css-extract-plugin\nexport const root = \"author-list-module--root--3tnc7\";\nexport const headline = \"author-list-module--headline--3BVPD typography-module--base--2DtHq\";\nexport const list = \"author-list-module--list--1awEt\";\nexport const listItem = \"author-list-module--listItem--13pbd\";\nexport const avatar = \"author-list-module--avatar--3sDy5\";","import * as styles from \"./blog-post.module.css\";\nimport { differenceInDays, formatDistance, format } from \"date-fns\";\nimport AuthorList from \"./author-list\";\nimport Container from \"./container\";\nimport PortableText from \"./portableText\";\nimport React from \"react\";\nimport { buildImageObj } from \"../lib/helpers\";\nimport { imageUrlFor } from \"../lib/image-url\";\n\nfunction BlogPost(props) {\n  const {\n    _rawBody,\n    authors,\n    categories,\n    title,\n    mainImage,\n    publishedAt,\n  } = props;\n  return (\n    <article className={styles.root}>\n      {mainImage && mainImage.asset && (\n        <div className={styles.mainImage}>\n          <img\n            src={imageUrlFor(buildImageObj(mainImage))\n              .width(1200)\n              .height(Math.floor((9 / 16) * 1200))\n              .fit(\"crop\")\n              .auto(\"format\")\n              .url()}\n            alt={mainImage.alt}\n          />\n        </div>\n      )}\n      <Container>\n        <div className={styles.grid}>\n          <div className={styles.mainContent}>\n            <h1 className={styles.title}>{title}</h1>\n            {_rawBody && <PortableText blocks={_rawBody} />}\n          </div>\n          <aside className={styles.metaContent}>\n            {publishedAt && (\n              <div className={styles.publishedAt}>\n                {differenceInDays(new Date(publishedAt), new Date()) > 3\n                  ? formatDistance(new Date(publishedAt), new Date())\n                  : format(new Date(publishedAt), \"MMMM Mo, yyyy\")}\n              </div>\n            )}\n            {authors && <AuthorList items={authors} title=\"Authors\" />}\n            {categories && (\n              <div className={styles.categories}>\n                <h3 className={styles.categoriesHeadline}>Categories</h3>\n                <ul>\n                  {categories.map((category) => (\n                    <li key={category._id}>{category.title}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </aside>\n        </div>\n      </Container>\n    </article>\n  );\n}\n\nexport default BlogPost;\n","// extracted by mini-css-extract-plugin\nexport const root = \"blog-post-module--root--3Bd5E\";\nexport const title = \"blog-post-module--title--1uZ-o typography-module--responsiveTitle1--2aak3\";\nexport const mainImage = \"blog-post-module--mainImage--bB9Ee\";\nexport const grid = \"blog-post-module--grid--3wRA5\";\nexport const mainContent = \"blog-post-module--mainContent--3bHQt\";\nexport const metaContent = \"blog-post-module--metaContent--IH9IS\";\nexport const publishedAt = \"blog-post-module--publishedAt--2Vzf7 typography-module--small--2jpCI\";\nexport const categories = \"blog-post-module--categories--3zhTU\";\nexport const categoriesHeadline = \"blog-post-module--categoriesHeadline---x0dT typography-module--base--2DtHq\";","import { graphql } from \"gatsby\";\nimport BlogPost from \"../components/blog-post\";\nimport React from \"react\";\nimport GraphQLErrorList from \"../components/graphql-error-list\";\nimport Layout from \"../containers/layout\";\nimport Container from \"../components/container\";\nimport SEO from \"../components/seo\";\nimport { toPlainText } from \"../lib/helpers\";\n\nexport const query = graphql`\n  query BlogPostTemplateQuery($id: String!) {\n    post: sanityPost(id: { eq: $id }) {\n      id\n      publishedAt\n      categories {\n        _id\n        title\n      }\n      mainImage {\n        ...SanityImage\n        alt\n      }\n      title\n      slug {\n        current\n      }\n      _rawExcerpt(resolveReferences: { maxDepth: 5 })\n      _rawBody(resolveReferences: { maxDepth: 5 })\n      authors {\n        _key\n        author {\n          image {\n            crop {\n              _key\n              _type\n              top\n              bottom\n              left\n              right\n            }\n            hotspot {\n              _key\n              _type\n              x\n              y\n              height\n              width\n            }\n            asset {\n              _id\n            }\n          }\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst BlogPostTemplate = (props) => {\n  const { data, errors } = props;\n  const post = data && data.post;\n  return (\n    <Layout>\n      {errors && <SEO title=\"GraphQL Error\" />}\n      {post && (\n        <SEO\n          title={post.title || \"Untitled\"}\n          description={toPlainText(post._rawExcerpt)}\n          image={post.mainImage}\n        />\n      )}\n\n      {errors && (\n        <Container>\n          <GraphQLErrorList errors={errors} />\n        </Container>\n      )}\n\n      {post && <BlogPost {...post} />}\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n"],"sourceRoot":""}